// Author: Diego Ochando Torres
// Date: 27/11/2020
// e-mail: c0022981@my.shu.ac.uk

/** @file guiButtonFunctions_doxy.java
 *  @brief Manage the buttons functionality.\n(Real name -> guiButtonFunctions.pde). 
 *  
 *  Details.
 *  \n Some buttons does different things depending if zumo is on manual or autonomous mode. You can find the descriptions below.
 *  \n Manage the buttons functionality as gui file is autogenerated and delete comments and everything.
 *  \n They have to be done here to use doxygen as it will be deleted in the other file.
*/


// -------------------------- GUI BUTTON FUNCTIONS ----------------------------

/**
* @brief Called when forward button is interacted. Different actions depending on states.
* \n <b>Pressed:</b> When 'press' event is received it does the following.
*  \n  - Manual: Sends the zumo to advance forward until this button is released.
*  \n  - Autonomous: Activate Zumo task 2 and moves forward detecting the borders.
* \n <b>Released:</b> When 'released' event is received it does the following.
*  \n  - Manual: Send the zumo to stop.
*  \n  - Autonomous: Disables this button.

* @param event button event received
*/
public void forwardButton(GEvent event){
  
  if(event == GEvent.PRESSED){
    println("Clicked forward button");
    if(zumoGUI.manual_mode){
      // Send move forward to zumo until button is released
      zumoGUI.serialPort.write(2);
    }
    else{
      // Activate task 2 if zumo is autonomous
      zumoGUI.serialPort.write(7);
      current_task_label.setText("Current performing: Task 2");
      gui_help_fill_label.setText(gui_help_strings[3]);
      EnableButton(room_button, true);
    }
  }
  if(event == GEvent.RELEASED || event == GEvent.CLICKED){
    println("Released forward button");
    if(zumoGUI.manual_mode){
      // Tell zumo to stop
      zumoGUI.serialPort.write(1);
    }
    else{
      // Disable the button when is autonomous forwarding
      DisableButton(forward_button, false);
    }
  }
  
}

// ----------------------------------------------------------------------------

/**
* @brief Called when backward button is interacted. Different actions depending on states.
* \n <b>Pressed:</b> When 'press' event is received it does the following.
*  \n  - Manual: Sends the zumo to move backward until this button is released.
* \n <b>Released:</b> When 'released' event is received it does the following.
*  \n  - Manual: Send the zumo to stop.

* @param event button event received
*/
public void backwardButton(GEvent event){

  if(event == GEvent.PRESSED){
    println("Clicked backward button");
    if(zumoGUI.manual_mode){
      // Send move backward to zumo until button is released
      zumoGUI.serialPort.write(3);
    }
    else{
      // Do nothing for now
    }
  }
  if(event == GEvent.RELEASED || event == GEvent.CLICKED){
    println("Released backward button");
    if(zumoGUI.manual_mode){
      // Tell zumo to stop
      zumoGUI.serialPort.write(1);
    }
  }

}

// ----------------------------------------------------------------------------

/**
* @brief Called when left button is interacted. Different actions depending on states.
* \n <b>Pressed:</b> When 'press' event is received it does the following.
*  \n  - Manual: Send turn left to zumo until this button is released.
*  \n  - Autonomous: Activates an autonomous turn to the left of 90 degrees.  If zumo has been warned about a room, it will be used to indicate that is on the left.
* \n <b>Released:</b> When 'released' event is received it does the following.
*  \n  - Manual: Send the zumo to stop.

* @param event button event received
*/
public void leftButton(GEvent event){

  if(event == GEvent.PRESSED){
    println("Clicked left button");
    if(zumoGUI.manual_mode){
      // Send turn left to zumo until button is released
      zumoGUI.serialPort.write(4);
    }
    else{
      // Activate task 4 if zumo is autonomous
      zumoGUI.serialPort.write(8);
    }
  }
  if(event == GEvent.RELEASED || event == GEvent.CLICKED){
    println("Released left button");
    if(zumoGUI.manual_mode){
      // Tell zumo to stop
      zumoGUI.serialPort.write(1);
    }
  }

}

// ----------------------------------------------------------------------------

/**
* @brief Called when right button is interacted. Different actions depending on states.
* \n <b>Pressed:</b> When 'press' event is received it does the following.
*  \n  - Manual: Send turn right to zumo until this button is released.
*  \n  - Autonomous: Activates an autonomous turn to the right of 90 degrees. If zumo has been warned about a room, it will be used to indicate that is on the right.
* \n <b>Released:</b> When 'released' event is received it does the following.
*  \n  - Manual: Send the zumo to stop.

* @param event button event received
*/
public void rightButton(GEvent event){

  if(event == GEvent.PRESSED){
    println("Clicked right button");
    if(zumoGUI.manual_mode){
      // Send turn right to zumo until button is released
      zumoGUI.serialPort.write(5);
    }
    else{
      // Activate task 4 if zumo is autonomous
      zumoGUI.serialPort.write(9);
    }
  }
  if(event == GEvent.RELEASED || event == GEvent.CLICKED){
    println("Released right button");
    if(zumoGUI.manual_mode){
      // Tell zumo to stop
      zumoGUI.serialPort.write(1);
    }
  }

}

// ----------------------------------------------------------------------------

/**
* @brief Toggles the zumo mode between manual and autonomous.
* \n Changes the possible actions and tasks that zumo will perform autonomously.
*/
public void modeToggleButton(){

  // Indicate the zumo to change its behavior
  //zumoGUI.serialPort.write(6);
  
  if(mode_toggle.getState() == 0){
    mode_label.setText("Manual mode");
    println("Zumo changed to manual mode");
    current_task_label.setText("Current performing: Task 1");
    zumo_msg_fill_label.setText("");
    gui_help_fill_label.setText(gui_help_strings[1]);
    zumoGUI.manual_mode = true;
    zumoGUI.serialPort.write(1);
    // Enable usable buttons
    EnableButton(forward_button, false);
    EnableButton(backward_button, false);
    EnableButton(left_button, false);
    EnableButton(right_button, false);
    DisableButton(room_button, true);
  }
  else{
    mode_label.setText("Autonomous mode");
    println("Zumo changed to autonomous mode");
    zumoGUI.manual_mode = false;
    // Disable not usable buttons
    DisableButton(backward_button, false);
    DisableButton(left_button, false);
    DisableButton(right_button, false);
  }

}

// ----------------------------------------------------------------------------

/**
* @brief Updates the GUI with room info and made the zumo scan the found room.
* \n It has to be pressed on the entrance of a room, exactly at the entrancce.
* \n After pressing this button you should press later left or right to indicate the room direction.
*/
public void roomButton(){
  
  zumoGUI.serialPort.write(10);
  current_task_label.setText("Current performing: Task 5");
  zumo_msg_fill_label.setText(zumo_data_strings[1]);
  DisableButton(room_button, true);
  EnableButton(left_button, false);
  EnableButton(right_button, false);
  zumoGUI.found_rooms++;
  
}

// ----------------------------------------------------------------------------
