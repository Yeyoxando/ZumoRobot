// Author: Diego Ochando Torres
// Date: 10/11/2020
// e-mail: c0022981@my.shu.ac.uk

/** @file zumoGUI_doxy.java
 *  @brief Zumo control GUI main script. \n(Real name -> zumoGUI.pde). 
 *  
 *  Details.
 *  \n Executes and draw the GUI.
 *  \n It receives serial data through an event and execute different actions to make the GUI responsive.
*/

// Need G4P library for GUI creation
import g4p_controls.*;
// Need Serial for communication over XBee
import processing.serial.*;

// ----------------------------------------------------------------------------

// ------------------------------ VARIABLES -----------------------------------

// XBee
/// @brief Serial port on the computer which will have connected the Xbee Link.
public static Serial serialPort;

// Zumo
/// @brief Indicates if zumo is in manual or autonomous mode to perform different actions.
public static boolean manual_mode = true;
/// @brief Number of rooms visited by Zumo
public static int found_rooms = 0;
/// @brief Stores the information about the visited rooms and its state.
public static String found_rooms_info = "";

// ----------------------------------------------------------------------------

// --------------------------- JAVA FUNCTIONS ---------------------------------

/// @brief Java function called at the beginning.
public void setup(){
  
  // Java window
  size(480, 480, JAVA2D);
  
  // G4P GUI
  createGUI();
  customGUI();
  
  // GUI initial settings
  SetInitialButtonsState();
  SetButtonsToFireAllEvents();
  gui_help_fill_label.setText(gui_help_strings[1]);
  
  // Serial connection (Serial is on my COM4 port)
  String portName = "COM4";
  serialPort = new Serial(this, portName, 9600);
  
}

// ----------------------------------------------------------------------------

/// @brief Java function to draw the screen.
public void draw(){
  
  background(255);

}

// ----------------------------------------------------------------------------

/**
* @brief Event trigger when data received thorugh XBee connection.
*        <br>Different actions will be taken depending on the received data.
*/
public void serialEvent(Serial serialPort){
  int value = serialPort.read();
  println("Received data");
  
  switch(value){
    case 100:{ // kGUIData_SwitchManualMode
      break;
    }
    case 101:{ // kGUIData_ReachedFrontWall
      GUI_ReachedFrontWall();
      break;
    }
    case 102:{ // kGUIData_FinishedAutoRotation
      GUI_FinishedAutoRotation();
      break;
    }
    case 103:{ // kGUIData_EmptyRoom
      GUI_EmptyRoom();
      break;
    }
    case 104:{ // kGUIData_ObjectInRoom
      GUI_ObjectInRoom();
      break;
    }
    default:{
      println("\n Unknown data: " + value);
      break;
    }
  };
  
}

// ----------------------------------------------------------------------------

// ------------------------------- GUI FUNCTIONS ------------------------------

/**
* @brief (Not used) G4P autogenerated. Use this method to add additional statements
*         to customise the GUI controls. 
*/
public void customGUI(){
  
}

// ----------------------------------------------------------------------------

/**
* @brief Encapsulation of the actions that has to 
*        be executed on GUI when the robot reaches a front wall and signal back.
*/
public void GUI_ReachedFrontWall(){
  
  EnableButton(left_button, false);
  EnableButton(right_button, false);
  
  current_task_label.setText("Currently performing: Task 3 & 4");
  zumo_msg_fill_label.setText(zumo_data_strings[0]);
  gui_help_fill_label.setText(gui_help_strings[2]);
  
}

// ----------------------------------------------------------------------------

/**
* @brief Encapsulation of the actions that has to 
*        be executed on GUI when the robot finishes its autonomous rotation.
*/
public void GUI_FinishedAutoRotation(){
  
  zumo_msg_fill_label.setText("");
  gui_help_fill_label.setText("");
  DisableButton(left_button, false);
  DisableButton(right_button, false);
  
  zumoGUI.serialPort.write(7);
  current_task_label.setText("Current performing: Task 2");
  
}

// ----------------------------------------------------------------------------

/**
* @brief Encapsulation of the actions that has to 
*        be executed on GUI when the robot scans a room and its empty
*/
public void GUI_EmptyRoom(){
  
  zumo_msg_fill_label.setText(zumo_data_strings[2]);
  gui_help_fill_label.setText("");
  found_rooms_info += ("Room #" + found_rooms + ": No objects found.\n");
  found_rooms_fill_label.setText(found_rooms_info);
  
}

// ----------------------------------------------------------------------------

/**
* @brief Encapsulation of the actions that has to 
*        be executed on GUI when the robot scans a room and has people inside
*/
public void GUI_ObjectInRoom(){
  
  zumo_msg_fill_label.setText(zumo_data_strings[2]);
  gui_help_fill_label.setText("");
  found_rooms_info += ("Room #" + found_rooms + ": People has been found.\n");
  found_rooms_fill_label.setText(found_rooms_info);
  
}

// ----------------------------------------------------------------------------

/* 
Pasted here to know values easily, declared on Zumo code .h

// Send to Zumo through GUI
enum ZumoData { 
  kZumoData_NoDataReceived = 0,
  kZumoData_Stop = 1,                // Task 1
  kZumoData_ManualForward = 2,       // Task 1
  kZumoData_ManualBackward = 3,      // Task 1
  kZumoData_ManualTurnLeft = 4,      // Task 1
  kZumoData_ManualTurnRight = 5,     // Task 1
  kZumoData_SwitchManualMode = 6,
  kZumoData_AutonomousForward = 7,   // Task 2
  kZumoData_AutonomousTurnLeft = 8,  // Task 4
  kZumoData_AutonomousTurnRight = 9, // Task 4
  kZumoData_FoundRoom = 10,          // Task 5
};

// Send to GUI from Zumo
enum GUIData{ 
  kGUIData_SwitchManualMode = 100,
  kGUIData_ReachedFrontWall = 101,
  kGUIData_FinishedAutoRotation = 102,
  kGUIData_EmptyRoom = 103,
  kGUIData_ObjectInRoom = 104,
};

*/
